#!/bin/sh
# -*- coding: utf-8, vim: expandtab:ts=4 -*-
# The origin of the idea of 'runable yaml': https://gist.github.com/corvax19/5661251
python3 -c '
import yaml
import sys

try:
    yaml.load(sys.stdin)

except yaml.YAMLError as exc:
    if hasattr(exc, "problem_mark"):
        shifting = 20  # Line no. where "%YAML 1.1" is! (Numbering starts from 0!)
        exc.problem_mark.line += shifting
        exc.context_mark.line += shifting
    print("Syntax error: {0}".format(exc))
    sys.exit(1)

print("Syntax OK!")
'<<EOF
%YAML 1.1
---
default:
 cutoff: 1  #  1 if not set
 radius: 2  # -1 if not set

features:
 - # Checks for underscore (_) character in token
    name: form
    type: token
    action_name: getForm
    fields: 0

 - # N-grams of the letters in a token
    name: ngr
    type: token
    action_name: ngrams
    fields: 0
    options:
        n: 2

 - # The n caracter long prefix ot a token
    name: prefix
    type: token
    action_name: prefix
    fields: 0
    options:
        n: 6

 - # The n caracter long suffix ot a token
    name: prefix
    type: token
    action_name: prefix
    fields: 0
    options:
        n: 4

 - # Does it have capital letter in it anywhere?
    name: hascap
    type: token
    action_name: hasCapOperator
    fields: 0

 - # Only first letter is capital?
    name: capitalized
    type: token
    action_name: isCapOperator
    fields: 0

 - # Does it have all letter capital?
    name: allcaps
    type: token
    action_name: isAllcapsOperator
    fields: 0

 - # Is the token Camel case?
    name: camel
    type: token
    action_name: isCamelOperator
    fields: 0

 - # Token is three uppercase letters?
    name: threecaps
    type: token
    action_name: threeCaps
    fields: 0

 - # Token is an uppercase letter followed by a period (from Bikel et al. (1999))
    name: capperiod
    type: token
    action_name: capPeriodOperator
    fields: 0

 - # Token pattern: lowercase -> 'a', uppercase -> 'A', other -> '_'
    name: longpatt
    type: token
    action_name: longPattern
    fields: 0

 - # Token pattern: lowercase -> 'a', uppercase -> 'A', other -> '_', merge neighbouring characters if they are same
    name: shortpatt
    type: token
    action_name: shortPattern
    fields: 0

 - # Token is number
    name: isdigit
    type: token
    action_name: isDigitOperator
    fields: 0

 - # Token is one digit (from Zhou and Su (2002))
    name: onedigit
    type: token
    action_name: oneDigitNumOperator
    fields: 0
    
 - # Token is two digit (from Bikel et al. (1999))
    name: twodigit
    type: token
    action_name: twoDigitNumOperator
    fields: 0
    
 - # Token is four digit
    name: fourdigit
    type: token
    action_name: fourDigitNumOperator
    fields: 0

 - # Token starts with number
    name: startswithnumber
    type: token
    action_name: startsWithNumberOperator
    fields: 0

 - # Token is three uppercase letters?
    name: digitslash
    type: token
    action_name: containsDigitAndSlashOperator
    fields: 0

 - # Token is three uppercase letters?
    name: digitdash
    type: token
    action_name: containsDigitAndDashOperator
    fields: 0

 - # Token contains digit and comma (. or ,) (from Bikel et al. (1999))
    name: digitcomma
    type: token
    action_name: containsDigitAndCommaOperator
    fields: 0

 - # Does the token contain number?
    name: hasnumber
    type: token
    action_name: hasNumberOperator
    fields: 0

 - # Token contains year decade (from Zhou and Su (2002))
    name: yeardecade
    type: token
    action_name: yearDecadeOperator
    fields: 0

 - # Does the token contain dash?
    name: hasdash
    type: token
    action_name: hasDashOperator
    fields: 0

 - # Does the token contain period?
    name: hasperiod
    type: token
    action_name: hasPeriodOperator
    fields: 0

 - # Token is punctuation
    name: punct
    type: token
    action_name: isPunctuationOperator
    fields: 0

 - # Get POS from BNC
    name: pos
    type: token
    action_name: chunkTag
    fields: 1

 - # Description: XXX Fill me
    name: posstart
    type: token
    action_name: firstChar
    fields: 1

 - # Kr code patterns of a sentence (extended version) EXTENSIONS DISABLED!
    name: krpatt
    type: sentence
    action_name: krPatts
    fields: 1
    radius: 0  # rad is not radius!
    options:
        rad: 3  # The old config is misleading!
        minLength: 2
        maxLength: 99
        lang: hu
        MSD: 0
        since_dt: 0  # (Endrédy & Indig 2015, section 4.2)
        CASDiff: 0  # (Endrédy & Indig 2015, section 4.2)
        POSSConnect: 0  # (Endrédy & Indig 2015, section 4.2)
        fullKr: 0

 - # Is sentence begin?
    name: sentstart
    type: sentence
    action_name: newSentenceStart
    fields: 0

 - # Is sentence end?
    name: sentend
    type: sentence
    action_name: newSentenceEnd
    fields: 0

 - # Description: XXX Fill me!
    name: loc
    type: lex
    action_name: hunner/freebase_lists/loc/loc.sorted
    fields: 0

 - # Description: XXX Fill me!
    name: org
    type: lex
    action_name: hunner/freebase_lists/org/org.sorted
    fields: 0

 - # Description: XXX Fill me!
    name: pers
    type: lex
    action_name: hunner/freebase_lists/pers/pers.sorted
    fields: 0

 - # Description: XXX Fill me!
    name: misc
    type: lex
    action_name: hunner/freebase_lists/misc/misc.sorted
    fields: 0

 - # Description: XXX Fill me!
    name: trainloc
    type: lex
    action_name: hunner/enwiki/fromTrainLists/loc.fromtrain.list
    fields: 0

 - # Description: XXX Fill me!
    name: trainorg
    type: lex
    action_name: hunner/enwiki/fromTrainLists/org.fromtrain.list
    fields: 0

 - # Description: XXX Fill me!
    name: trainpers
    type: lex
    action_name: hunner/enwiki/fromTrainLists/per.fromtrain.list
    fields: 0

 - # Description: XXX Fill me!
    name: trainmisc
    type: lex
    action_name: hunner/enwiki/fromTrainLists/misc.fromtrain.list
    fields: 0

...
EOF
